"""BaseException - базовое исключение, от которого берут начало все остальные.
	SystemExit - исключение, порождаемое функцией sys.exit при выходе из программы.
	KeyboardInterrupt - порождается при прерывании программы пользователем (обычно 		сочетанием клавиш Ctrl+C).
	Exception – то, на чем фактически строятся все остальные ошибки;
		StopIteration - порождается встроенной функцией next, если в итераторе больше нет 		элементов.
		ArithmeticError - арифметическая ошибка.
			FloatingPointError - порождается при неудачном выполнении операции с плавающей запятой.
			 На практике встречается нечасто.
			OverflowError - возникает, когда результат арифметической операции 	слишком велик для представления.
			 Не появляется при обычной работе с целыми числами (так как python поддерживает длинные числа),
			  но может возникать в некоторых других случаях.
			ZeroDivisionError - деление на ноль.
1) исключения это нормальный и важный механизм в питоне, не нужно стесняться его использовать, бросать и перехватывать
исключения, писать свои типы исключений. К сожалению, по ряду причин не редко вижу,
что программисты не кидают исключений в своих функциях
2) когда пишем функции, то стараемся думать не в позитивном ключе, а в плане того, что может пойти не так.
В таких случаях бросаем исключения, делаем это как можно раньше (в начале функции)
3) Механизм по-умолчанию в питоне просто выведет текст исключения и завершит работу программы, если нам нужно другое
поведение то используем try/except/finally
4) блоков except может быть несколько, каждый со своим типом исключения и логикой, но важно чтобы исключение
было конкретным, и в блоке всегда делаем хоть что-то. НЕ проглатываем исключения!
5) finally выполняется в любом случае, даже если исключения не упало, НО важно понимать, что файналли это не какой то
волшебный блок, исключение может упасть и там, нужно обдумывать логику этого блока (например не использовать переменные,
которые могли не быть созданы)
6) raise используем чтобы бросить исключение самостоятельно, при этом можно указать какое конкретно исключение бросить.
Если не указать то будет брошено последнее упавшее исключение (важно чтобы оно было!)
7) не стесняемся писать свои классы иключений, главное давать им понятные имена и прописываем в доке случаи,
когда они могут быть выброшены
Оператор try/except также имеет пункт else. Он работает только в том случае, если в вашем коде нет ни единой ошибки. 
"""
""" # 1
Введите два числа с клавиатуры. Поделите одно на другое. Обработайте ошибку деления на ноль, если ошибок нет,
 то результат деления возвести в квадрат. Также используйте оператор finally."""
# num1 = int(input("num1: "))
# num2 = int(input("num2: "))
#
# try:
#     print(num1/num2)
# except ZeroDivisionError:
#     print(0)
# else:
#     print((num1/num2)**2)
# finally:
#     print("good bay")
#
""" # 2
Введите два числа с клавиатуры. Поделите одно на другое. Обработайте деления на ноль, преобразования и общее исключение.

Примечание: используйте ValueError для обработки исключения на тип данных.
"""

# try:
#     num1 = int(input("num1: "))
#     num2 = int(input("num2: "))
#     print(num1/num2)
# except ValueError:
#     print("преобразование невозможно")
# except ZeroDivisionError:
#     print("0!!!")
# except Exception:
#     print("exeption?")
# else:
#     print((num1/num2)**2)
# finally:
#     print("good bay")
""" dz 
Ввод с клавиатуры. Если строка введённая с клавиатуры – это числа, то поделить первое на второе. Обработать ошибку
 деления на ноль. Если второе число 0, то программа запрашивает ввод чисел заново. Также если были введены буквы,
  то обработать исключение. 
"""
# try:
#     num1 = int(input("num1: "))
#     num2 = int(input("num2: "))
#     print(num1/num2)
# except ValueError:
#     print("преобразование невозможно")
# except ZeroDivisionError:
#     print("0!!!")
#     try:
#         num2 = int(input("num2: "))
#         print(num1/num2)
#     except ValueError:
#         print("преобразование невозможно")
# finally:
#     print("good bay")
while True:
    try:
        str = input("введите строку: ")
        lst = str.split()
        res = (int(lst[0])/int(lst[1]))
    except ZeroDivisionError:
        print("На ноль делится!")
    except ValueError:
        print("Введите числа!")
    else:
        print(res)
        break
